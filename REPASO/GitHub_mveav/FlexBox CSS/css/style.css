*,
*::after,
*::before {
    box-sizing: border-box;
    /*considera el tamaño de la caja desde los bordes, valor
    por defecto content-box -> el tamaño se cuenta desde el contenido*/
}

.contenedor {
    background-color: #333;
    height: 30vh;
    display: flex;
    /*flex|inline-flex*/
    /*display: inline-flex; /*ocupa el espacio real del contenedor, por lo tanto las dos cajas
    se colocan una al lado de la otra */
    flex-direction: row;
    /*row|row-reverse|column|column-reverse*/
    /* flex-wrap: nowrap; /*todos sus hijos en una fila. Valor por defecto */
    /*flex-wrap: wrap; /* se considera el tamaño de cada elemento y si no caben en una línea se 
    colocarán debajo*/
    flex-wrap: nowrap;
    /*nowrap|wrap|wrap-reverse
    flujo de la caja*/
    /* podemos usar un atajo de flex-direction y flex-wrap
    flex-flow: row wrap;
    */
     /* Es un shorthand de flex-direction y flex-wrap */
    /*  align-content: stretch;*/
    align-content: flex-start;
    /* Define la alineación de los hijos en el eje transversal (cross axis), NO funciona cuando los hijos están en UNA sóla línea (es decir cuando flex-wrap tiene el valor de nowrap, NO FUNCIONA) */
    /* flex-start | flex-end | center | space-between | space-around | space-evenly | stretch */
    align-items: stretch;
    /* Define la alineación de los hijos en el eje transversal (cross axis), dentro de cada línea */
    /* stretch | flex-start | flex-end | center | baseline */
    justify-content: flex-start;
    /* Define la alineación de los hijos en el eje principal (main axis) */
    /* flex-start | center | flex-end | space-between | space-around | space-evenly */
}

.item {
    /*width: 20%; /* este ancho se ignora si flex-directorio es por columna, el tamaño se 
    basa en la altura no en la anchura para colocar los elementos*/
    /*  height: 20%; */
    /* height: 20vh; */
   /* width: 20vh;*/
    border: medium solid #999;
    background-color: #666;
    /*width: 100px;  /* lo usamos para flex-grow*/
    flex-grow: 0; /*Valor por defecto 0. No permitidos valores negativos.
    si le ponemos un valor positivo cada elemento absorve el espacio libre de forma proporcional a
    cada elemento teniendo en cuenta el tamaño indicado*/
    /* Cuando la caja flexbox tenga espacio sobrante, es la habilidad o el factor de crecer, valor por defecto es 0, NO se aceptan valores negativos */
    flex-shrink: 1; /*valor por defecto es 1. Encoge*/
    /* Cuando la caja flexbox NO tenga espacio sobrante, es la habilidad o el factor de encogerse, valor por defecto es 1, NO se aceptan valores negativos */
    /* flex-shrink solo funciona con medidas relativas a la ventana como vh*/
   /* flex-basis: auto;*/
    flex-basis: 20%;
    /* Es el tamaño del elemento hijo dentro de la línea de la caja flexbox
      Si la caja flexbox tiene dirección de fila, flex-basis representa el width
      Si la caja flexbox tiene dirección de columna, flex-basis representa el height
      Valor por defecto auto */
  /*  flex: 0 1 auto;*/
    /* Es un shorthand de las propiedades flex-grow flex-shrink y flex-basis, en ese orden*/
    order: 0;
    /* Representa el orden que tendrán los elementos hijos en la caja flexbox
      Valor por defecto 0
      Se aceptan valores positivos y negativos
      Un valor menor siempre irá antes que un valor mayor */
    /*align-self: stretch;
    /* stretch | flex-start | flex-end | center | baseline */
    /* Sobreescribe el valor de la propiedad align-items sólo para el elemento hijo especificado */
}

.item:nth-child(2) {
  /* flex-grow: 2;
  /* conseguimos que el segundo item ocupe el doble des espacio libre */
 /* align-self: flex-start;
      /* Sobreescribe el valor de la propiedad align-items sólo para el elemento hijo especificado */
    order: 2;
}

.item:nth-child(1) {
    flex-shrink: 2;
    /* solo funciona con nowrap */
}